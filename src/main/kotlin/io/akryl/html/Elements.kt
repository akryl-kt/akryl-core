@file:Suppress("NOTHING_TO_INLINE", "FunctionName", "unused")

package io.akryl.html

import io.akryl.Styled
import io.akryl.react.ReactNode
import org.w3c.dom.DragEvent
import org.w3c.dom.clipboard.ClipboardEvent
import org.w3c.dom.events.Event
import org.w3c.dom.events.KeyboardEvent
import org.w3c.dom.events.MouseEvent
import org.w3c.dom.events.WheelEvent

@Suppress("UNCHECKED_CAST")
private inline fun listeners(
  noinline onBlur: ((event: Event) -> Unit)? = null,
  noinline onChange: ((event: Event) -> Unit)? = null,
  noinline onContextMenu: ((event: Event) -> Unit)? = null,
  noinline onFocus: ((event: Event) -> Unit)? = null,
  noinline onInput: ((event: Event) -> Unit)? = null,
  noinline onInvalid: ((event: Event) -> Unit)? = null,
  noinline onReset: ((event: Event) -> Unit)? = null,
  noinline onSearch: ((event: Event) -> Unit)? = null,
  noinline onSelect: ((event: Event) -> Unit)? = null,
  noinline onSubmit: ((event: Event) -> Unit)? = null,
  noinline onScroll: ((event: Event) -> Unit)? = null,
  noinline onToggle: ((event: Event) -> Unit)? = null,
  noinline onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  noinline onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  noinline onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  noinline onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  noinline onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  noinline onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  noinline onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  noinline onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  noinline onClick: ((event: MouseEvent) -> Unit)? = null,
  noinline onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  noinline onWheel: ((event: WheelEvent) -> Unit)? = null,
  noinline onDrag: ((event: DragEvent) -> Unit)? = null,
  noinline onDragEnd: ((event: DragEvent) -> Unit)? = null,
  noinline onDragEnter: ((event: DragEvent) -> Unit)? = null,
  noinline onDragLeave: ((event: DragEvent) -> Unit)? = null,
  noinline onDragOver: ((event: DragEvent) -> Unit)? = null,
  noinline onDragStart: ((event: DragEvent) -> Unit)? = null,
  noinline onDrop: ((event: DragEvent) -> Unit)? = null,
  noinline onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  noinline onCut: ((event: ClipboardEvent) -> Unit)? = null,
  noinline onPaste: ((event: ClipboardEvent) -> Unit)? = null
): HashMap<String, (Event) -> Unit> {
  val result = HashMap<String, (Event) -> Unit>()
  if (onBlur != null) result["onBlur"] = onBlur
  if (onChange != null) result["onChange"] = onChange
  if (onContextMenu != null) result["onContextMenu"] = onContextMenu
  if (onFocus != null) result["onFocus"] = onFocus
  if (onInput != null) result["onInput"] = onInput
  if (onInvalid != null) result["onInvalid"] = onInvalid
  if (onReset != null) result["onReset"] = onReset
  if (onSearch != null) result["onSearch"] = onSearch
  if (onSelect != null) result["onSelect"] = onSelect
  if (onSubmit != null) result["onSubmit"] = onSubmit
  if (onScroll != null) result["onScroll"] = onScroll
  if (onToggle != null) result["onToggle"] = onToggle
  if (onKeyDown != null) result["onKeyDown"] = onKeyDown as (Event) -> Unit
  if (onKeyPress != null) result["onKeyPress"] = onKeyPress as (Event) -> Unit
  if (onKeyUp != null) result["onKeyUp"] = onKeyUp as (Event) -> Unit
  if (onMouseDown != null) result["onMouseDown"] = onMouseDown as (Event) -> Unit
  if (onMouseMove != null) result["onMouseMove"] = onMouseMove as (Event) -> Unit
  if (onMouseOut != null) result["onMouseOut"] = onMouseOut as (Event) -> Unit
  if (onMouseOver != null) result["onMouseOver"] = onMouseOver as (Event) -> Unit
  if (onMouseUp != null) result["onMouseUp"] = onMouseUp as (Event) -> Unit
  if (onClick != null) result["onClick"] = onClick as (Event) -> Unit
  if (onDoubleClick != null) result["onDblClick"] = onDoubleClick as (Event) -> Unit
  if (onWheel != null) result["onWheel"] = onWheel as (Event) -> Unit
  if (onDrag != null) result["onDrag"] = onDrag as (Event) -> Unit
  if (onDragEnd != null) result["onDragEnd"] = onDragEnd as (Event) -> Unit
  if (onDragEnter != null) result["onDragEnter"] = onDragEnter as (Event) -> Unit
  if (onDragLeave != null) result["onDragLeave"] = onDragLeave as (Event) -> Unit
  if (onDragOver != null) result["onDragOver"] = onDragOver as (Event) -> Unit
  if (onDragStart != null) result["onDragStart"] = onDragStart as (Event) -> Unit
  if (onDrop != null) result["onDrop"] = onDrop as (Event) -> Unit
  if (onCopy != null) result["onCopy"] = onCopy as (Event) -> Unit
  if (onCut != null) result["onCut"] = onCut as (Event) -> Unit
  if (onPaste != null) result["onPaste"] = onPaste as (Event) -> Unit
  return result
}

private inline fun classes(clazz: String?, classes: List<String?>?): String? {
  return ((classes ?: emptyList()) + clazz)
    .filterNotNull()
    .joinToString(" ")
    .ifEmpty { null }
}

private inline fun children(text: String?, child: ReactNode?, children: Iterable<ReactNode>?): List<ReactNode> {
  if (text == null && child == null && children == null) return emptyList()

  val result = ArrayList<ReactNode>()
  if (text != null) result.add(Text(text))
  if (child != null) result.add(child)
  if (children != null) result.addAll(children)
  return result
}

fun Styled.A(
  target: String? = null,
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  href: String? = null,
  rel: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  media: String? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  ping: String? = null,
  accessKey: String? = null,
  title: String? = null,
  download: String? = null,
  hrefLang: String? = null,
  translate: String? = null,
  type: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "a",
  cssPrefix = prefix,
  attributes = attributes(
    target = target,
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    href = href,
    rel = rel,
    dir = dir,
    tabIndex = tabIndex,
    media = media,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    ping = ping,
    accessKey = accessKey,
    title = title,
    download = download,
    hrefLang = hrefLang,
    translate = translate,
    type = type,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.A(vararg children: ReactNode) = html(
  tag = "a",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Abbr(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "abbr",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Abbr(vararg children: ReactNode) = html(
  tag = "abbr",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Address(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "address",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Address(vararg children: ReactNode) = html(
  tag = "address",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Area(
  alt: String? = null,
  hrefLang: String? = null,
  download: String? = null,
  coords: String? = null,
  draggable: Boolean? = null,
  shape: String? = null,
  id: String? = null,
  title: String? = null,
  translate: String? = null,
  lang: String? = null,
  hidden: Boolean? = null,
  contentEditable: String? = null,
  href: String? = null,
  rel: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  accessKey: String? = null,
  type: String? = null,
  target: String? = null,
  media: String? = null,
  spellCheck: Boolean? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "area",
  cssPrefix = prefix,
  attributes = attributes(
    alt = alt,
    hrefLang = hrefLang,
    download = download,
    coords = coords,
    draggable = draggable,
    shape = shape,
    id = id,
    title = title,
    translate = translate,
    lang = lang,
    hidden = hidden,
    contentEditable = contentEditable,
    href = href,
    rel = rel,
    dir = dir,
    tabIndex = tabIndex,
    accessKey = accessKey,
    type = type,
    target = target,
    media = media,
    spellCheck = spellCheck,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Area(vararg children: ReactNode) = html(
  tag = "area",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Article(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "article",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Article(vararg children: ReactNode) = html(
  tag = "article",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Aside(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "aside",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Aside(vararg children: ReactNode) = html(
  tag = "aside",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Audio(
  hidden: Boolean? = null,
  id: String? = null,
  muted: Boolean? = null,
  src: String? = null,
  contentEditable: String? = null,
  autoPlay: String? = null,
  preload: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  controls: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  loop: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "audio",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    muted = muted,
    src = src,
    contentEditable = contentEditable,
    autoPlay = autoPlay,
    preload = preload,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    controls = controls,
    translate = translate,
    dropZone = dropZone,
    loop = loop,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Audio(vararg children: ReactNode) = html(
  tag = "audio",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.B(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "b",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.B(vararg children: ReactNode) = html(
  tag = "b",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Base(
  target: String? = null,
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  href: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "base",
  cssPrefix = prefix,
  attributes = attributes(
    target = target,
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    href = href,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Base(vararg children: ReactNode) = html(
  tag = "base",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Bdi(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "bdi",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Bdi(vararg children: ReactNode) = html(
  tag = "bdi",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Bdo(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "bdo",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Bdo(vararg children: ReactNode) = html(
  tag = "bdo",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Blockquote(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  cite: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "blockquote",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    cite = cite,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Blockquote(vararg children: ReactNode) = html(
  tag = "blockquote",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Body(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "body",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Body(vararg children: ReactNode) = html(
  tag = "body",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Br(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "br",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Br(vararg children: ReactNode) = html(
  tag = "br",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Button(
  formNoValidate: Boolean? = null,
  form: String? = null,
  formTarget: String? = null,
  autoFocus: Boolean? = null,
  draggable: Boolean? = null,
  name: String? = null,
  id: String? = null,
  value: String? = null,
  formEncType: String? = null,
  formAction: String? = null,
  title: String? = null,
  translate: String? = null,
  lang: String? = null,
  hidden: Boolean? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  accessKey: String? = null,
  formMethod: String? = null,
  type: String? = null,
  disabled: Boolean? = null,
  spellCheck: Boolean? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "button",
  cssPrefix = prefix,
  attributes = attributes(
    formNoValidate = formNoValidate,
    form = form,
    formTarget = formTarget,
    autoFocus = autoFocus,
    draggable = draggable,
    name = name,
    id = id,
    value = value,
    formEncType = formEncType,
    formAction = formAction,
    title = title,
    translate = translate,
    lang = lang,
    hidden = hidden,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    accessKey = accessKey,
    formMethod = formMethod,
    type = type,
    disabled = disabled,
    spellCheck = spellCheck,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Button(vararg children: ReactNode) = html(
  tag = "button",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Canvas(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  height: Int? = null,
  width: Int? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "canvas",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    height = height,
    width = width,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Canvas(vararg children: ReactNode) = html(
  tag = "canvas",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Caption(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "caption",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Caption(vararg children: ReactNode) = html(
  tag = "caption",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Cite(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "cite",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Cite(vararg children: ReactNode) = html(
  tag = "cite",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Code(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "code",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Code(vararg children: ReactNode) = html(
  tag = "code",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Col(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  span: Int? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "col",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    span = span,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Col(vararg children: ReactNode) = html(
  tag = "col",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Colgroup(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  span: Int? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "colgroup",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    span = span,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Colgroup(vararg children: ReactNode) = html(
  tag = "colgroup",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Data(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "data",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Data(vararg children: ReactNode) = html(
  tag = "data",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Datalist(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "datalist",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Datalist(vararg children: ReactNode) = html(
  tag = "datalist",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Dd(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "dd",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Dd(vararg children: ReactNode) = html(
  tag = "dd",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Del(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  datetime: String? = null,
  accessKey: String? = null,
  title: String? = null,
  cite: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "del",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    datetime = datetime,
    accessKey = accessKey,
    title = title,
    cite = cite,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Del(vararg children: ReactNode) = html(
  tag = "del",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Details(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  open: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "details",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    open = open,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Details(vararg children: ReactNode) = html(
  tag = "details",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Dfn(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "dfn",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Dfn(vararg children: ReactNode) = html(
  tag = "dfn",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Dialog(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  open: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "dialog",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    open = open,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Dialog(vararg children: ReactNode) = html(
  tag = "dialog",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Div(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "div",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Div(vararg children: ReactNode) = html(
  tag = "div",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Dl(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "dl",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Dl(vararg children: ReactNode) = html(
  tag = "dl",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Dt(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "dt",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Dt(vararg children: ReactNode) = html(
  tag = "dt",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Em(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "em",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Em(vararg children: ReactNode) = html(
  tag = "em",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Embed(
  hidden: Boolean? = null,
  id: String? = null,
  src: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  height: Int? = null,
  width: Int? = null,
  translate: String? = null,
  type: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "embed",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    src = src,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    height = height,
    width = width,
    translate = translate,
    type = type,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Embed(vararg children: ReactNode) = html(
  tag = "embed",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Fieldset(
  hidden: Boolean? = null,
  id: String? = null,
  name: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  disabled: Boolean? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  form: String? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "fieldset",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    name = name,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    disabled = disabled,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    form = form,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Fieldset(vararg children: ReactNode) = html(
  tag = "fieldset",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Figcaption(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "figcaption",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Figcaption(vararg children: ReactNode) = html(
  tag = "figcaption",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Figure(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "figure",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Figure(vararg children: ReactNode) = html(
  tag = "figure",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Footer(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "footer",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Footer(vararg children: ReactNode) = html(
  tag = "footer",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Form(
  target: String? = null,
  hidden: Boolean? = null,
  id: String? = null,
  name: String? = null,
  contentEditable: String? = null,
  encType: String? = null,
  noValidate: Boolean? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  action: String? = null,
  autocomplete: Boolean? = null,
  acceptCharset: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  method: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "form",
  cssPrefix = prefix,
  attributes = attributes(
    target = target,
    hidden = hidden,
    id = id,
    name = name,
    contentEditable = contentEditable,
    encType = encType,
    noValidate = noValidate,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    action = action,
    autocomplete = autocomplete,
    acceptCharset = acceptCharset,
    translate = translate,
    dropZone = dropZone,
    method = method,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Form(vararg children: ReactNode) = html(
  tag = "form",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.H1(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "h1",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.H1(vararg children: ReactNode) = html(
  tag = "h1",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.H2(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "h2",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.H2(vararg children: ReactNode) = html(
  tag = "h2",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.H3(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "h3",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.H3(vararg children: ReactNode) = html(
  tag = "h3",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.H4(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "h4",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.H4(vararg children: ReactNode) = html(
  tag = "h4",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.H5(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "h5",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.H5(vararg children: ReactNode) = html(
  tag = "h5",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.H6(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "h6",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.H6(vararg children: ReactNode) = html(
  tag = "h6",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Head(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "head",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Head(vararg children: ReactNode) = html(
  tag = "head",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Header(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "header",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Header(vararg children: ReactNode) = html(
  tag = "header",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Hr(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "hr",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Hr(vararg children: ReactNode) = html(
  tag = "hr",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Html(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  xmlns: String? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "html",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    xmlns = xmlns,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Html(vararg children: ReactNode) = html(
  tag = "html",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.I(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "i",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.I(vararg children: ReactNode) = html(
  tag = "i",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Iframe(
  hidden: Boolean? = null,
  id: String? = null,
  name: String? = null,
  src: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  height: Int? = null,
  width: Int? = null,
  translate: String? = null,
  sandbox: String? = null,
  dropZone: String? = null,
  srcDoc: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "iframe",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    name = name,
    src = src,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    height = height,
    width = width,
    translate = translate,
    sandbox = sandbox,
    dropZone = dropZone,
    srcDoc = srcDoc,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Iframe(vararg children: ReactNode) = html(
  tag = "iframe",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Img(
  hidden: Boolean? = null,
  id: String? = null,
  src: String? = null,
  useMap: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  isMap: String? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  alt: String? = null,
  accessKey: String? = null,
  title: String? = null,
  height: Int? = null,
  width: Int? = null,
  longDesc: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "img",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    src = src,
    useMap = useMap,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    isMap = isMap,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    alt = alt,
    accessKey = accessKey,
    title = title,
    height = height,
    width = width,
    longDesc = longDesc,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Img(vararg children: ReactNode) = html(
  tag = "img",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Input(
  formNoValidate: Boolean? = null,
  multiple: String? = null,
  min: String? = null,
  alt: String? = null,
  accept: String? = null,
  form: String? = null,
  step: Double? = null,
  width: Int? = null,
  formTarget: String? = null,
  autoFocus: Boolean? = null,
  draggable: Boolean? = null,
  name: String? = null,
  id: String? = null,
  size: String? = null,
  readonly: Boolean? = null,
  value: String? = null,
  list: String? = null,
  formEncType: String? = null,
  formAction: String? = null,
  title: String? = null,
  height: Int? = null,
  translate: String? = null,
  lang: String? = null,
  hidden: Boolean? = null,
  contentEditable: String? = null,
  pattern: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  maxLength: Int? = null,
  max: String? = null,
  accessKey: String? = null,
  formMethod: String? = null,
  dirname: String? = null,
  type: String? = null,
  src: String? = null,
  placeholder: String? = null,
  disabled: Boolean? = null,
  checked: Boolean? = null,
  spellCheck: Boolean? = null,
  required: Boolean? = null,
  autocomplete: Boolean? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "input",
  cssPrefix = prefix,
  attributes = attributes(
    formNoValidate = formNoValidate,
    multiple = multiple,
    min = min,
    alt = alt,
    accept = accept,
    form = form,
    step = step,
    width = width,
    formTarget = formTarget,
    autoFocus = autoFocus,
    draggable = draggable,
    name = name,
    id = id,
    size = size,
    readonly = readonly,
    value = value,
    list = list,
    formEncType = formEncType,
    formAction = formAction,
    title = title,
    height = height,
    translate = translate,
    lang = lang,
    hidden = hidden,
    contentEditable = contentEditable,
    pattern = pattern,
    dir = dir,
    tabIndex = tabIndex,
    maxLength = maxLength,
    max = max,
    accessKey = accessKey,
    formMethod = formMethod,
    dirname = dirname,
    type = type,
    src = src,
    placeholder = placeholder,
    disabled = disabled,
    checked = checked,
    spellCheck = spellCheck,
    required = required,
    autocomplete = autocomplete,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Input(vararg children: ReactNode) = html(
  tag = "input",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Ins(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  datetime: String? = null,
  accessKey: String? = null,
  title: String? = null,
  cite: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "ins",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    datetime = datetime,
    accessKey = accessKey,
    title = title,
    cite = cite,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Ins(vararg children: ReactNode) = html(
  tag = "ins",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Kbd(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "kbd",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Kbd(vararg children: ReactNode) = html(
  tag = "kbd",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Label(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  `for`: String? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  form: String? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "label",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    `for` = `for`,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    form = form,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Label(vararg children: ReactNode) = html(
  tag = "label",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Legend(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "legend",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Legend(vararg children: ReactNode) = html(
  tag = "legend",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Li(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  value: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "li",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    value = value,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Li(vararg children: ReactNode) = html(
  tag = "li",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Link(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  href: String? = null,
  rel: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  media: String? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  sizes: String? = null,
  accessKey: String? = null,
  title: String? = null,
  hrefLang: String? = null,
  translate: String? = null,
  type: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "link",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    href = href,
    rel = rel,
    dir = dir,
    tabIndex = tabIndex,
    media = media,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    sizes = sizes,
    accessKey = accessKey,
    title = title,
    hrefLang = hrefLang,
    translate = translate,
    type = type,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Link(vararg children: ReactNode) = html(
  tag = "link",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Main(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "main",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Main(vararg children: ReactNode) = html(
  tag = "main",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Map(
  hidden: Boolean? = null,
  id: String? = null,
  name: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "map",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    name = name,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Map(vararg children: ReactNode) = html(
  tag = "map",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Mark(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "mark",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Mark(vararg children: ReactNode) = html(
  tag = "mark",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Meta(
  hidden: Boolean? = null,
  id: String? = null,
  name: String? = null,
  contentEditable: String? = null,
  content: String? = null,
  charset: String? = null,
  httpEquiv: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "meta",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    name = name,
    contentEditable = contentEditable,
    content = content,
    charset = charset,
    httpEquiv = httpEquiv,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Meta(vararg children: ReactNode) = html(
  tag = "meta",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Meter(
  hidden: Boolean? = null,
  id: String? = null,
  high: String? = null,
  contentEditable: String? = null,
  value: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  max: String? = null,
  form: String? = null,
  min: String? = null,
  accessKey: String? = null,
  title: String? = null,
  low: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  optimum: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "meter",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    high = high,
    contentEditable = contentEditable,
    value = value,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    max = max,
    form = form,
    min = min,
    accessKey = accessKey,
    title = title,
    low = low,
    translate = translate,
    dropZone = dropZone,
    optimum = optimum,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Meter(vararg children: ReactNode) = html(
  tag = "meter",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Nav(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "nav",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Nav(vararg children: ReactNode) = html(
  tag = "nav",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Noscript(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "noscript",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Noscript(vararg children: ReactNode) = html(
  tag = "noscript",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Object(
  hidden: Boolean? = null,
  id: String? = null,
  data: String? = null,
  name: String? = null,
  contentEditable: String? = null,
  useMap: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  form: String? = null,
  accessKey: String? = null,
  title: String? = null,
  height: Int? = null,
  width: Int? = null,
  translate: String? = null,
  type: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "object",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    data = data,
    name = name,
    contentEditable = contentEditable,
    useMap = useMap,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    form = form,
    accessKey = accessKey,
    title = title,
    height = height,
    width = width,
    translate = translate,
    type = type,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Object(vararg children: ReactNode) = html(
  tag = "object",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Ol(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  reversed: String? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  start: String? = null,
  dropZone: String? = null,
  type: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "ol",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    reversed = reversed,
    accessKey = accessKey,
    title = title,
    translate = translate,
    start = start,
    dropZone = dropZone,
    type = type,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Ol(vararg children: ReactNode) = html(
  tag = "ol",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Optgroup(
  hidden: Boolean? = null,
  id: String? = null,
  label: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  disabled: Boolean? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "optgroup",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    label = label,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    disabled = disabled,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Optgroup(vararg children: ReactNode) = html(
  tag = "optgroup",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Option(
  hidden: Boolean? = null,
  id: String? = null,
  label: String? = null,
  contentEditable: String? = null,
  value: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  disabled: Boolean? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  selected: Boolean? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "option",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    label = label,
    contentEditable = contentEditable,
    value = value,
    dir = dir,
    tabIndex = tabIndex,
    disabled = disabled,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    selected = selected,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Option(vararg children: ReactNode) = html(
  tag = "option",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Output(
  hidden: Boolean? = null,
  id: String? = null,
  name: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  `for`: String? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  form: String? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "output",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    name = name,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    `for` = `for`,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    form = form,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Output(vararg children: ReactNode) = html(
  tag = "output",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.P(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "p",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.P(vararg children: ReactNode) = html(
  tag = "p",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Param(
  hidden: Boolean? = null,
  id: String? = null,
  name: String? = null,
  contentEditable: String? = null,
  value: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "param",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    name = name,
    contentEditable = contentEditable,
    value = value,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Param(vararg children: ReactNode) = html(
  tag = "param",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Path(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  d: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "path",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    d = d,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Picture(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "picture",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Picture(vararg children: ReactNode) = html(
  tag = "picture",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Pre(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "pre",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Pre(vararg children: ReactNode) = html(
  tag = "pre",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Progress(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  value: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  max: String? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "progress",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    value = value,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    max = max,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Progress(vararg children: ReactNode) = html(
  tag = "progress",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Q(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  cite: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "q",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    cite = cite,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Q(vararg children: ReactNode) = html(
  tag = "q",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Rp(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "rp",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Rp(vararg children: ReactNode) = html(
  tag = "rp",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Rt(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "rt",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Rt(vararg children: ReactNode) = html(
  tag = "rt",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Ruby(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "ruby",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Ruby(vararg children: ReactNode) = html(
  tag = "ruby",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.S(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "s",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.S(vararg children: ReactNode) = html(
  tag = "s",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Samp(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "samp",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Samp(vararg children: ReactNode) = html(
  tag = "samp",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Script(
  hidden: Boolean? = null,
  id: String? = null,
  src: String? = null,
  contentEditable: String? = null,
  charset: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  async: String? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  defer: String? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  type: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "script",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    src = src,
    contentEditable = contentEditable,
    charset = charset,
    dir = dir,
    tabIndex = tabIndex,
    async = async,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    defer = defer,
    accessKey = accessKey,
    title = title,
    translate = translate,
    type = type,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Script(vararg children: ReactNode) = html(
  tag = "script",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Section(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "section",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Section(vararg children: ReactNode) = html(
  tag = "section",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Select(
  hidden: Boolean? = null,
  id: String? = null,
  name: String? = null,
  size: String? = null,
  contentEditable: String? = null,
  multiple: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  disabled: Boolean? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  required: Boolean? = null,
  form: String? = null,
  accessKey: String? = null,
  title: String? = null,
  autoFocus: Boolean? = null,
  translate: String? = null,
  dropZone: String? = null,
  value: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "select",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    name = name,
    size = size,
    contentEditable = contentEditable,
    multiple = multiple,
    dir = dir,
    tabIndex = tabIndex,
    disabled = disabled,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    required = required,
    form = form,
    accessKey = accessKey,
    title = title,
    autoFocus = autoFocus,
    translate = translate,
    dropZone = dropZone,
    value = value,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Select(vararg children: ReactNode) = html(
  tag = "select",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Small(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "small",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Small(vararg children: ReactNode) = html(
  tag = "small",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Source(
  hidden: Boolean? = null,
  id: String? = null,
  src: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  media: String? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  type: String? = null,
  dropZone: String? = null,
  srcSet: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "source",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    src = src,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    media = media,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    type = type,
    dropZone = dropZone,
    srcSet = srcSet,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Source(vararg children: ReactNode) = html(
  tag = "source",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Span(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "span",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Span(vararg children: ReactNode) = html(
  tag = "span",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Strong(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "strong",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Strong(vararg children: ReactNode) = html(
  tag = "strong",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Style(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  media: String? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  type: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "style",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    media = media,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    type = type,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Style(vararg children: ReactNode) = html(
  tag = "style",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Sub(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "sub",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Sub(vararg children: ReactNode) = html(
  tag = "sub",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Summary(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "summary",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Summary(vararg children: ReactNode) = html(
  tag = "summary",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Sup(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "sup",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Sup(vararg children: ReactNode) = html(
  tag = "sup",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Svg(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  width: Int? = null,
  height: Int? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "svg",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    width = width,
    height = height,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Svg(vararg children: ReactNode) = html(
  tag = "svg",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Table(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "table",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Table(vararg children: ReactNode) = html(
  tag = "table",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Tbody(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "tbody",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Tbody(vararg children: ReactNode) = html(
  tag = "tbody",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Td(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  colSpan: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  rowSpan: Int? = null,
  accessKey: String? = null,
  title: String? = null,
  headers: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "td",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    colSpan = colSpan,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    rowSpan = rowSpan,
    accessKey = accessKey,
    title = title,
    headers = headers,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Td(vararg children: ReactNode) = html(
  tag = "td",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Template(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "template",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Template(vararg children: ReactNode) = html(
  tag = "template",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Textarea(
  form: String? = null,
  autoFocus: Boolean? = null,
  draggable: Boolean? = null,
  name: String? = null,
  id: String? = null,
  readonly: Boolean? = null,
  title: String? = null,
  wrap: String? = null,
  translate: String? = null,
  lang: String? = null,
  hidden: Boolean? = null,
  contentEditable: String? = null,
  rows: Int? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  maxLength: Int? = null,
  accessKey: String? = null,
  cols: Int? = null,
  dirname: String? = null,
  placeholder: String? = null,
  disabled: Boolean? = null,
  spellCheck: Boolean? = null,
  required: Boolean? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "textarea",
  cssPrefix = prefix,
  attributes = attributes(
    form = form,
    autoFocus = autoFocus,
    draggable = draggable,
    name = name,
    id = id,
    readonly = readonly,
    title = title,
    wrap = wrap,
    translate = translate,
    lang = lang,
    hidden = hidden,
    contentEditable = contentEditable,
    rows = rows,
    dir = dir,
    tabIndex = tabIndex,
    maxLength = maxLength,
    accessKey = accessKey,
    cols = cols,
    dirname = dirname,
    placeholder = placeholder,
    disabled = disabled,
    spellCheck = spellCheck,
    required = required,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Textarea(vararg children: ReactNode) = html(
  tag = "textarea",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Tfoot(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "tfoot",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Tfoot(vararg children: ReactNode) = html(
  tag = "tfoot",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Th(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  colSpan: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  rowSpan: Int? = null,
  abbr: String? = null,
  accessKey: String? = null,
  title: String? = null,
  headers: String? = null,
  scope: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "th",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    colSpan = colSpan,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    rowSpan = rowSpan,
    abbr = abbr,
    accessKey = accessKey,
    title = title,
    headers = headers,
    scope = scope,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Th(vararg children: ReactNode) = html(
  tag = "th",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Thead(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "thead",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Thead(vararg children: ReactNode) = html(
  tag = "thead",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Time(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  datetime: String? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "time",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    datetime = datetime,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Time(vararg children: ReactNode) = html(
  tag = "time",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Title(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "title",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Title(vararg children: ReactNode) = html(
  tag = "title",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Tr(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "tr",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Tr(vararg children: ReactNode) = html(
  tag = "tr",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Track(
  kind: String? = null,
  hidden: Boolean? = null,
  id: String? = null,
  label: String? = null,
  src: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  default: String? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  srcLang: String? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "track",
  cssPrefix = prefix,
  attributes = attributes(
    kind = kind,
    hidden = hidden,
    id = id,
    label = label,
    src = src,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    default = default,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    srcLang = srcLang,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Track(vararg children: ReactNode) = html(
  tag = "track",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.U(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "u",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.U(vararg children: ReactNode) = html(
  tag = "u",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Ul(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "ul",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Ul(vararg children: ReactNode) = html(
  tag = "ul",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Var(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "var",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Var(vararg children: ReactNode) = html(
  tag = "var",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Video(
  autoPlay: String? = null,
  width: Int? = null,
  draggable: Boolean? = null,
  id: String? = null,
  preload: String? = null,
  title: String? = null,
  height: Int? = null,
  translate: String? = null,
  lang: String? = null,
  hidden: Boolean? = null,
  muted: Boolean? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  accessKey: String? = null,
  controls: String? = null,
  loop: String? = null,
  src: String? = null,
  spellCheck: Boolean? = null,
  dropZone: String? = null,
  poster: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "video",
  cssPrefix = prefix,
  attributes = attributes(
    autoPlay = autoPlay,
    width = width,
    draggable = draggable,
    id = id,
    preload = preload,
    title = title,
    height = height,
    translate = translate,
    lang = lang,
    hidden = hidden,
    muted = muted,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    accessKey = accessKey,
    controls = controls,
    loop = loop,
    src = src,
    spellCheck = spellCheck,
    dropZone = dropZone,
    poster = poster,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Video(vararg children: ReactNode) = html(
  tag = "video",
  cssPrefix = prefix,
  children = children.asList()
)

fun Styled.Wbr(
  hidden: Boolean? = null,
  id: String? = null,
  contentEditable: String? = null,
  dir: String? = null,
  tabIndex: Int? = null,
  draggable: Boolean? = null,
  lang: String? = null,
  spellCheck: Boolean? = null,
  accessKey: String? = null,
  title: String? = null,
  translate: String? = null,
  dropZone: String? = null,
  onBlur: ((event: Event) -> Unit)? = null,
  onChange: ((event: Event) -> Unit)? = null,
  onContextMenu: ((event: Event) -> Unit)? = null,
  onFocus: ((event: Event) -> Unit)? = null,
  onInput: ((event: Event) -> Unit)? = null,
  onInvalid: ((event: Event) -> Unit)? = null,
  onReset: ((event: Event) -> Unit)? = null,
  onSearch: ((event: Event) -> Unit)? = null,
  onSelect: ((event: Event) -> Unit)? = null,
  onSubmit: ((event: Event) -> Unit)? = null,
  onScroll: ((event: Event) -> Unit)? = null,
  onToggle: ((event: Event) -> Unit)? = null,
  onKeyDown: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyPress: ((event: KeyboardEvent) -> Unit)? = null,
  onKeyUp: ((event: KeyboardEvent) -> Unit)? = null,
  onMouseDown: ((event: MouseEvent) -> Unit)? = null,
  onMouseMove: ((event: MouseEvent) -> Unit)? = null,
  onMouseOut: ((event: MouseEvent) -> Unit)? = null,
  onMouseOver: ((event: MouseEvent) -> Unit)? = null,
  onMouseUp: ((event: MouseEvent) -> Unit)? = null,
  onClick: ((event: MouseEvent) -> Unit)? = null,
  onDoubleClick: ((event: MouseEvent) -> Unit)? = null,
  onWheel: ((event: WheelEvent) -> Unit)? = null,
  onDrag: ((event: DragEvent) -> Unit)? = null,
  onDragEnd: ((event: DragEvent) -> Unit)? = null,
  onDragEnter: ((event: DragEvent) -> Unit)? = null,
  onDragLeave: ((event: DragEvent) -> Unit)? = null,
  onDragOver: ((event: DragEvent) -> Unit)? = null,
  onDragStart: ((event: DragEvent) -> Unit)? = null,
  onDrop: ((event: DragEvent) -> Unit)? = null,
  onCopy: ((event: ClipboardEvent) -> Unit)? = null,
  onCut: ((event: ClipboardEvent) -> Unit)? = null,
  onPaste: ((event: ClipboardEvent) -> Unit)? = null,
  clazz: String? = null,
  classes: List<String?>? = null,
  style: Map<String, String?> = emptyMap(),
  text: String? = null,
  child: ReactNode? = null,
  children: Iterable<ReactNode>? = null,
  innerHtml: String? = null,
  key: Any? = null
) = html(
  tag = "wbr",
  cssPrefix = prefix,
  attributes = attributes(
    hidden = hidden,
    id = id,
    contentEditable = contentEditable,
    dir = dir,
    tabIndex = tabIndex,
    draggable = draggable,
    lang = lang,
    spellCheck = spellCheck,
    accessKey = accessKey,
    title = title,
    translate = translate,
    dropZone = dropZone,
    clazz = classes(clazz, classes)
  ),
  listeners = listeners(
    onBlur,
    onChange,
    onContextMenu,
    onFocus,
    onInput,
    onInvalid,
    onReset,
    onSearch,
    onSelect,
    onSubmit,
    onScroll,
    onToggle,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseDown,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onClick,
    onDoubleClick,
    onWheel,
    onDrag,
    onDragEnd,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDragStart,
    onDrop,
    onCopy,
    onCut,
    onPaste
  ),
  style = style,
  children = children(text, child, children),
  innerHtml = innerHtml,
  key = key
)

fun Styled.Wbr(vararg children: ReactNode) = html(
  tag = "wbr",
  cssPrefix = prefix,
  children = children.asList()
)

private inline fun attributes(
  data: String? = null,
  useMap: String? = null,
  multiple: String? = null,
  content: String? = null,
  rowSpan: Int? = null,
  form: String? = null,
  accept: String? = null,
  formTarget: String? = null,
  autoFocus: Boolean? = null,
  shape: String? = null,
  size: String? = null,
  value: String? = null,
  list: String? = null,
  formEncType: String? = null,
  title: String? = null,
  headers: String? = null,
  acceptCharset: String? = null,
  method: String? = null,
  srcDoc: String? = null,
  hidden: Boolean? = null,
  `for`: String? = null,
  defer: String? = null,
  srcLang: String? = null,
  type: String? = null,
  target: String? = null,
  kind: String? = null,
  charset: String? = null,
  required: Boolean? = null,
  sandbox: String? = null,
  poster: String? = null,
  formNoValidate: Boolean? = null,
  noValidate: Boolean? = null,
  autoPlay: String? = null,
  colSpan: Int? = null,
  default: String? = null,
  min: String? = null,
  alt: String? = null,
  step: Double? = null,
  coords: String? = null,
  label: String? = null,
  id: String? = null,
  async: String? = null,
  reversed: String? = null,
  height: Int? = null,
  muted: Boolean? = null,
  rows: Int? = null,
  dirname: String? = null,
  selected: Boolean? = null,
  placeholder: String? = null,
  sizes: String? = null,
  low: String? = null,
  autocomplete: Boolean? = null,
  dropZone: String? = null,
  open: String? = null,
  isMap: String? = null,
  datetime: String? = null,
  abbr: String? = null,
  cite: String? = null,
  download: String? = null,
  width: Int? = null,
  xmlns: String? = null,
  span: Int? = null,
  name: String? = null,
  readonly: Boolean? = null,
  scope: String? = null,
  translate: String? = null,
  contentEditable: String? = null,
  pattern: String? = null,
  href: String? = null,
  rel: String? = null,
  tabIndex: Int? = null,
  accessKey: String? = null,
  formMethod: String? = null,
  cols: Int? = null,
  start: String? = null,
  loop: String? = null,
  optimum: String? = null,
  srcSet: String? = null,
  src: String? = null,
  high: String? = null,
  media: String? = null,
  disabled: Boolean? = null,
  spellCheck: Boolean? = null,
  checked: Boolean? = null,
  hrefLang: String? = null,
  draggable: Boolean? = null,
  encType: String? = null,
  preload: String? = null,
  ping: String? = null,
  formAction: String? = null,
  longDesc: String? = null,
  wrap: String? = null,
  lang: String? = null,
  dir: String? = null,
  maxLength: Int? = null,
  max: String? = null,
  controls: String? = null,
  httpEquiv: String? = null,
  action: String? = null,
  d: String? = null,
  clazz: String? = null
): HashMap<String, String> {
  val result = HashMap<String, String>()
  if (data != null) result["data"] = data
  if (useMap != null) result["usemap"] = useMap
  if (multiple != null) result["multiple"] = multiple
  if (content != null) result["content"] = content
  if (rowSpan != null) result["rowspan"] = rowSpan.toString()
  if (form != null) result["form"] = form
  if (accept != null) result["accept"] = accept
  if (formTarget != null) result["formtarget"] = formTarget
  if (autoFocus == true) result["autofocus"] = ""
  if (shape != null) result["shape"] = shape
  if (size != null) result["size"] = size
  if (value != null) result["value"] = value
  if (list != null) result["list"] = list
  if (formEncType != null) result["formenctype"] = formEncType
  if (title != null) result["title"] = title
  if (headers != null) result["headers"] = headers
  if (acceptCharset != null) result["accept-charset"] = acceptCharset
  if (method != null) result["method"] = method
  if (srcDoc != null) result["srcdoc"] = srcDoc
  if (hidden == true) result["hidden"] = ""
  if (`for` != null) result["for"] = `for`
  if (defer != null) result["defer"] = defer
  if (srcLang != null) result["srclang"] = srcLang
  if (type != null) result["type"] = type
  if (target != null) result["target"] = target
  if (kind != null) result["kind"] = kind
  if (charset != null) result["charset"] = charset
  if (required == true) result["required"] = ""
  if (sandbox != null) result["sandbox"] = sandbox
  if (poster != null) result["poster"] = poster
  if (formNoValidate == true) result["formnovalidate"] = ""
  if (noValidate == true) result["novalidate"] = ""
  if (autoPlay != null) result["autoplay"] = autoPlay
  if (colSpan != null) result["colspan"] = colSpan.toString()
  if (default != null) result["default"] = default
  if (min != null) result["min"] = min
  if (alt != null) result["alt"] = alt
  if (step != null) result["step"] = step.toString()
  if (coords != null) result["coords"] = coords
  if (label != null) result["label"] = label
  if (id != null) result["id"] = id
  if (async != null) result["async"] = async
  if (reversed != null) result["reversed"] = reversed
  if (height != null) result["height"] = height.toString()
  if (muted == true) result["muted"] = ""
  if (rows != null) result["rows"] = rows.toString()
  if (dirname != null) result["dirname"] = dirname
  if (selected == true) result["selected"] = ""
  if (placeholder != null) result["placeholder"] = placeholder
  if (sizes != null) result["sizes"] = sizes
  if (low != null) result["low"] = low
  if (autocomplete == true) result["autocomplete"] = ""
  if (dropZone != null) result["dropzone"] = dropZone
  if (open != null) result["open"] = open
  if (isMap != null) result["ismap"] = isMap
  if (datetime != null) result["datetime"] = datetime
  if (abbr != null) result["abbr"] = abbr
  if (cite != null) result["cite"] = cite
  if (download != null) result["download"] = download
  if (width != null) result["width"] = width.toString()
  if (xmlns != null) result["xmlns"] = xmlns
  if (span != null) result["span"] = span.toString()
  if (name != null) result["name"] = name
  if (readonly == true) result["readonly"] = ""
  if (scope != null) result["scope"] = scope
  if (translate != null) result["translate"] = translate
  if (contentEditable != null) result["contenteditable"] = contentEditable
  if (pattern != null) result["pattern"] = pattern
  if (href != null) result["href"] = href
  if (rel != null) result["rel"] = rel
  if (tabIndex != null) result["tabindex"] = tabIndex.toString()
  if (accessKey != null) result["accesskey"] = accessKey
  if (formMethod != null) result["formmethod"] = formMethod
  if (cols != null) result["cols"] = cols.toString()
  if (start != null) result["start"] = start
  if (loop != null) result["loop"] = loop
  if (optimum != null) result["optimum"] = optimum
  if (srcSet != null) result["srcset"] = srcSet
  if (src != null) result["src"] = src
  if (high != null) result["high"] = high
  if (media != null) result["media"] = media
  if (disabled == true) result["disabled"] = ""
  if (spellCheck == true) result["spellcheck"] = ""
  if (checked == true) result["checked"] = ""
  if (hrefLang != null) result["hreflang"] = hrefLang
  if (draggable == true) result["draggable"] = ""
  if (encType != null) result["enctype"] = encType
  if (preload != null) result["preload"] = preload
  if (ping != null) result["ping"] = ping
  if (formAction != null) result["formaction"] = formAction
  if (longDesc != null) result["longdesc"] = longDesc
  if (wrap != null) result["wrap"] = wrap
  if (lang != null) result["lang"] = lang
  if (dir != null) result["dir"] = dir
  if (maxLength != null) result["maxlength"] = maxLength.toString()
  if (max != null) result["max"] = max
  if (controls != null) result["controls"] = controls
  if (httpEquiv != null) result["http-equiv"] = httpEquiv
  if (action != null) result["action"] = action
  if (d != null) result["d"] = d
  if (clazz != null) result["class"] = clazz
  return result
}

// todo svg elements
