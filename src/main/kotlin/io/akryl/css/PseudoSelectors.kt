@file:Suppress("unused")

package io.akryl.css

interface PseudoSelectors {
  val active get() = PseudoSelector(":active")
  val checked get() = PseudoSelector(":checked")
  val default get() = PseudoSelector(":default")
  val disabled get() = PseudoSelector(":disabled")
  val empty get() = PseudoSelector(":empty")
  val enabled get() = PseudoSelector(":enabled")
  val firstChild get() = PseudoSelector(":first-child")
  val firstOfType get() = PseudoSelector(":first-of-type")
  val focus get() = PseudoSelector(":focus")
  val hover get() = PseudoSelector(":hover")
  val indeterminate get() = PseudoSelector(":indeterminate")
  val inRange get() = PseudoSelector(":in-range")
  val invalid get() = PseudoSelector(":invalid")
  val lastChild get() = PseudoSelector(":last-child")
  val lastOfType get() = PseudoSelector(":last-of-type")
  val link get() = PseudoSelector(":link")
  fun not(selector: String, block: RuleSet) = PseudoSelector(":not($selector)")
  fun not(name: ClassName, block: RuleSet) = PseudoSelector(":not(${name.selector})")
  fun nthChild(selector: String, block: RuleSet) = PseudoSelector(":nth-child($selector)")
  fun nthLastChild(selector: String, block: RuleSet) = PseudoSelector(":nth-last-child($selector)")
  fun nthLastOfType(selector: String, block: RuleSet) = PseudoSelector(":nth-last-of-type($selector)")
  fun nthOfType(selector: String, block: RuleSet) = PseudoSelector(":nth-of-type($selector)")
  fun nthChild(name: ClassName, block: RuleSet) = PseudoSelector(":nth-child(${name.selector})")
  fun nthLastChild(name: ClassName, block: RuleSet) = PseudoSelector(":nth-last-child(${name.selector})")
  fun nthLastOfType(name: ClassName, block: RuleSet) = PseudoSelector(":nth-last-of-type(${name.selector})")
  fun nthOfType(name: ClassName, block: RuleSet) = PseudoSelector(":nth-of-type(${name.selector})")
  val onlyChild get() = PseudoSelector(":only-child")
  val onlyOfType get() = PseudoSelector(":only-of-type")
  val optional get() = PseudoSelector(":optional")
  val outOfRange get() = PseudoSelector(":out-of-range")
  val readOnly get() = PseudoSelector(":read-only")
  val readWrite get() = PseudoSelector(":read-write")
  val required get() = PseudoSelector(":required")
  val valid get() = PseudoSelector(":valid")
  val visited get() = PseudoSelector(":visited")
  val after get() = PseudoSelector("::after")
  val before get() = PseudoSelector("::before")
  val placeholder get() = PseudoSelector("::placeholder")
}