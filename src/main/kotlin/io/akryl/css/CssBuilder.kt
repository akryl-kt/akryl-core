package io.akryl.css

private fun camelToDashed(value: String): String {
  return buildString {
    for (c in value) {
      if (c in 'A'..'Z') {
        append('-')
        append(c.toLowerCase())
      } else {
        append(c)
      }
    }
  }
}

fun StringBuilder.stringify(selector: String, builder: CssBuilder) {
  if (builder.properties.isNotEmpty()) {
    append("$selector {\n")
    for ((k, v) in builder.properties) {
      append("  ${camelToDashed(k)}: $v;\n")
    }
    append("}\n")
  }

  for (rule in builder.rules) {
    val innerSelector = rule.selector.replace("&", selector).trim()
    val innerBuilder = CssBuilder().apply(rule.block)
    stringify(innerSelector, innerBuilder)
  }
}

typealias RuleSet = CssBuilder.() -> Unit

data class Rule(val selector: String, val block: RuleSet)

@Suppress("unused")
class CssBuilder {
  val properties = LinkedHashMap<String, Any?>()
  val rules = ArrayList<Rule>()

  // common
  val alignContent get() = AlignContentScope(properties, "alignContent")
  val alignItems get() = AlignItemsScope(properties, "alignItems")
  val alignSelf get() = AlignSelfScope(properties, "alignSelf")
  val all get() = StringScope(properties, "all")
  val animation get() = StringScope(properties, "animation")
  val animationDelay get() = StringScope(properties, "animationDelay")
  val animationDirection get() = StringScope(properties, "animationDirection")
  val animationDuration get() = StringScope(properties, "animationDuration")
  val animationFillMode get() = StringScope(properties, "animationFillMode")
  val animationIterationCount get() = StringScope(properties, "animationIterationCount")
  val animationName get() = StringScope(properties, "animationName")
  val animationPlayState get() = StringScope(properties, "animationPlayState")
  val animationTimingFunction get() = StringScope(properties, "animationTimingFunction")
  val backfaceVisibility get() = StringScope(properties, "backfaceVisibility")
  val background get() = BackgroundScope(properties, "background")
  val backgroundAttachment get() = BackgroundAttachmentScope(properties, "backgroundAttachment")
  val backgroundBlendMode get() = BlendModeScope(properties, "backgroundBlendMode")
  val backgroundClip get() = ExtendScope(properties, "backgroundClip")
  val backgroundColor get() = ColorScope(properties, "backgroundColor")
  val backgroundImage get() = ImageScope(properties, "backgroundImage")
  val backgroundOrigin get() = ExtendScope(properties, "backgroundOrigin")
  val backgroundPosition get() = BackgroundPositionScope(properties, "backgroundPosition")
  val backgroundRepeat get() = BackgroundRepeatScope(properties, "backgroundRepeat")
  val backgroundSize get() = BackgroundSizeScope(properties, "backgroundSize")
  val border get() = BorderScope(properties, "border")
  val borderBottom get() = BorderScope(properties, "borderBottom")
  val borderBottomColor get() = StringScope(properties, "borderBottomColor")
  val borderBottomLeftRadius get() = StringScope(properties, "borderBottomLeftRadius")
  val borderBottomRightRadius get() = StringScope(properties, "borderBottomRightRadius")
  val borderBottomStyle get() = BorderStyleScope(properties, "borderBottomStyle")
  val borderBottomWidth get() = StringScope(properties, "borderBottomWidth")
  val borderCollapse get() = StringScope(properties, "borderCollapse")
  val borderColor get() = StringScope(properties, "borderColor")
  val borderImage get() = StringScope(properties, "borderImage")
  val borderImageOutset get() = StringScope(properties, "borderImageOutset")
  val borderImageRepeat get() = StringScope(properties, "borderImageRepeat")
  val borderImageSlice get() = StringScope(properties, "borderImageSlice")
  val borderImageSource get() = StringScope(properties, "borderImageSource")
  val borderImageWidth get() = StringScope(properties, "borderImageWidth")
  val borderLeft get() = BorderScope(properties, "borderLeft")
  val borderLeftColor get() = StringScope(properties, "borderLeftColor")
  val borderLeftStyle get() = BorderStyleScope(properties, "borderLeftStyle")
  val borderLeftWidth get() = StringScope(properties, "borderLeftWidth")
  val borderRadius get() = StringScope(properties, "borderRadius")
  val borderRight get() = BorderScope(properties, "borderRight")
  val borderRightColor get() = StringScope(properties, "borderRightColor")
  val borderRightStyle get() = BorderStyleScope(properties, "borderRightStyle")
  val borderRightWidth get() = StringScope(properties, "borderRightWidth")
  val borderSpacing get() = StringScope(properties, "borderSpacing")
  val borderStyle get() = BorderStyleScope(properties, "borderStyle")
  val borderTop get() = BorderScope(properties, "borderTop")
  val borderTopColor get() = StringScope(properties, "borderTopColor")
  val borderTopLeftRadius get() = StringScope(properties, "borderTopLeftRadius")
  val borderTopRightRadius get() = StringScope(properties, "borderTopRightRadius")
  val borderTopStyle get() = BorderStyleScope(properties, "borderTopStyle")
  val borderTopWidth get() = StringScope(properties, "borderTopWidth")
  val borderWidth get() = StringScope(properties, "borderWidth")
  val bottom get() = LinearScope(properties, "bottom")
  val boxDecorationBreak get() = StringScope(properties, "boxDecorationBreak")
  val boxShadow get() = BoxShadowScope(properties, "boxShadow")
  val boxSizing get() = BoxSizingScope(properties, "boxSizing")
  val captionSide get() = StringScope(properties, "captionSide")
  val caretColor get() = StringScope(properties, "caretColor")
  val clear get() = StringScope(properties, "clear")
  val clip get() = StringScope(properties, "clip")
  val color get() = ColorScope(properties, "color")
  val columnCount get() = StringScope(properties, "columnCount")
  val columnFill get() = StringScope(properties, "columnFill")
  val columnGap get() = StringScope(properties, "columnGap")
  val columnRule get() = StringScope(properties, "columnRule")
  val columnRuleColor get() = StringScope(properties, "columnRuleColor")
  val columnRuleStyle get() = StringScope(properties, "columnRuleStyle")
  val columnRuleWidth get() = StringScope(properties, "columnRuleWidth")
  val columnSpan get() = StringScope(properties, "columnSpan")
  val columnWidth get() = StringScope(properties, "columnWidth")
  val columns get() = StringScope(properties, "columns")
  val content get() = QuotedStringScope(properties, "content")
  val counterIncrement get() = StringScope(properties, "counterIncrement")
  val counterReset get() = StringScope(properties, "counterReset")
  val cursor get() = StringScope(properties, "cursor")
  val direction get() = StringScope(properties, "direction")
  val display get() = DisplayScope(properties, "display")
  val emptyCells get() = StringScope(properties, "emptyCells")
  val filter get() = StringScope(properties, "filter")
  val flex get() = FlexScope(properties, "flex")
  val flexBasis get() = LinearScope(properties, "flexBasis")
  val flexDirection get() = FlexDirectionScope(properties, "flexDirection")
  val flexFlow get() = StringScope(properties, "flexFlow")
  val flexGrow get() = NumberScope(properties, "flexGrow")
  val flexShrink get() = NumberScope(properties, "flexShrink")
  val flexWrap get() = FlexWrapScope(properties, "flexWrap")
  val float get() = StringScope(properties, "float")
  val font get() = StringScope(properties, "font")
  val fontFamily get() = FontFamilyScope(properties, "fontFamily")
  val fontKerning get() = StringScope(properties, "fontKerning")
  val fontSize get() = LinearScope(properties, "fontSize")
  val fontSizeAdjust get() = StringScope(properties, "fontSizeAdjust")
  val fontStretch get() = StringScope(properties, "fontStretch")
  val fontStyle get() = FontStyleScope(properties, "fontStyle")
  val fontVariant get() = StringScope(properties, "fontVariant")
  val fontWeight get() = FontWeightScope(properties, "fontWeight")
  val grid get() = StringScope(properties, "grid")
  val gridArea get() = StringScope(properties, "gridArea")
  val gridAutoColumns get() = StringScope(properties, "gridAutoColumns")
  val gridAutoFlow get() = StringScope(properties, "gridAutoFlow")
  val gridAutoRows get() = StringScope(properties, "gridAutoRows")
  val gridColumn get() = StringScope(properties, "gridColumn")
  val gridColumnEnd get() = StringScope(properties, "gridColumnEnd")
  val gridColumnGap get() = StringScope(properties, "gridColumnGap")
  val gridColumnStart get() = StringScope(properties, "gridColumnStart")
  val gridGap get() = StringScope(properties, "gridGap")
  val gridRow get() = StringScope(properties, "gridRow")
  val gridRowEnd get() = StringScope(properties, "gridRowEnd")
  val gridRowGap get() = StringScope(properties, "gridRowGap")
  val gridRowStart get() = StringScope(properties, "gridRowStart")
  val gridTemplate get() = StringScope(properties, "gridTemplate")
  val gridTemplateAreas get() = StringScope(properties, "gridTemplateAreas")
  val gridTemplateColumns get() = StringScope(properties, "gridTemplateColumns")
  val gridTemplateRows get() = StringScope(properties, "gridTemplateRows")
  val hangingPunctuation get() = StringScope(properties, "hangingPunctuation")
  val height get() = DimensionScope(properties, "height")
  val hyphens get() = StringScope(properties, "hyphens")
  val isolation get() = StringScope(properties, "isolation")
  val justifyContent get() = StringScope(properties, "justifyContent")
  val left get() = LinearScope(properties, "left")
  val letterSpacing get() = StringScope(properties, "letterSpacing")
  val lineHeight get() = LineHeightScope(properties, "lineHeight")
  val listStyle get() = StringScope(properties, "listStyle")
  val listStyleImage get() = StringScope(properties, "listStyleImage")
  val listStylePosition get() = StringScope(properties, "listStylePosition")
  val listStyleType get() = ListStyleTypeScope(properties, "listStyleType")
  val margin get() = InsetsScope(properties, "margin")
  val marginBottom get() = LinearScope(properties, "marginBottom")
  val marginLeft get() = LinearScope(properties, "marginLeft")
  val marginRight get() = LinearScope(properties, "marginRight")
  val marginTop get() = LinearScope(properties, "marginTop")
  val maxHeight get() = StringScope(properties, "maxHeight")
  val maxWidth get() = StringScope(properties, "maxWidth")
  val minHeight get() = StringScope(properties, "minHeight")
  val minWidth get() = StringScope(properties, "minWidth")
  val mixBlendMode get() = StringScope(properties, "mixBlendMode")
  val objectFit get() = StringScope(properties, "objectFit")
  val objectPosition get() = StringScope(properties, "objectPosition")
  val opacity get() = NumberScope(properties, "opacity")
  val order get() = StringScope(properties, "order")
  val outline get() = OutlineScope(properties, "outline")
  val outlineColor get() = ColorScope(properties, "outlineColor")
  val outlineOffset get() = StringScope(properties, "outlineOffset")
  val outlineStyle get() = StringScope(properties, "outlineStyle")
  val outlineWidth get() = LinearScope(properties, "outlineWidth")
  val overflow get() = StringScope(properties, "overflow")
  val overflowX get() = StringScope(properties, "overflowX")
  val overflowY get() = StringScope(properties, "overflowY")
  val padding get() = InsetsScope(properties, "padding")
  val paddingBottom get() = StringScope(properties, "paddingBottom")
  val paddingLeft get() = StringScope(properties, "paddingLeft")
  val paddingRight get() = StringScope(properties, "paddingRight")
  val paddingTop get() = StringScope(properties, "paddingTop")
  val pageBreakAfter get() = StringScope(properties, "pageBreakAfter")
  val pageBreakBefore get() = StringScope(properties, "pageBreakBefore")
  val pageBreakInside get() = StringScope(properties, "pageBreakInside")
  val perspective get() = StringScope(properties, "perspective")
  val perspectiveOrigin get() = StringScope(properties, "perspectiveOrigin")
  val pointerEvents get() = StringScope(properties, "pointerEvents")
  val position get() = PositionScope(properties, "position")
  val quotes get() = StringScope(properties, "quotes")
  val resize get() = StringScope(properties, "resize")
  val right get() = LinearScope(properties, "right")
  val scrollBehavior get() = StringScope(properties, "scrollBehavior")
  val tabSize get() = StringScope(properties, "tabSize")
  val tableLayout get() = StringScope(properties, "tableLayout")
  val textAlign get() = TextAlignScope(properties, "textAlign")
  val textAlignLast get() = StringScope(properties, "textAlignLast")
  val textDecoration get() = StringScope(properties, "textDecoration")
  val textDecorationColor get() = StringScope(properties, "textDecorationColor")
  val textDecorationLine get() = StringScope(properties, "textDecorationLine")
  val textDecorationStyle get() = StringScope(properties, "textDecorationStyle")
  val textIndent get() = StringScope(properties, "textIndent")
  val textJustify get() = StringScope(properties, "textJustify")
  val textOverflow get() = StringScope(properties, "textOverflow")
  val textShadow get() = StringScope(properties, "textShadow")
  val textTransform get() = StringScope(properties, "textTransform")
  val top get() = LinearScope(properties, "top")
  val transform get() = TransformScope(properties, "transform")
  val transformOrigin get() = StringScope(properties, "transformOrigin")
  val transformStyle get() = StringScope(properties, "transformStyle")
  val transition get() = StringScope(properties, "transition")
  val transitionDelay get() = StringScope(properties, "transitionDelay")
  val transitionDuration get() = StringScope(properties, "transitionDuration")
  val transitionProperty get() = StringScope(properties, "transitionProperty")
  val transitionTimingFunction get() = StringScope(properties, "transitionTimingFunction")
  val unicodeBidi get() = StringScope(properties, "unicodeBidi")
  val userSelect get() = StringScope(properties, "userSelect")
  val verticalAlign get() = StringScope(properties, "verticalAlign")
  val visibility get() = StringScope(properties, "visibility")
  val whiteSpace get() = StringScope(properties, "whiteSpace")
  val width get() = DimensionScope(properties, "width")
  val willChange get() = StringScope(properties, "willChange")
  val wordBreak get() = WordBreakScope(properties, "wordBreak")
  val wordSpacing get() = StringScope(properties, "wordSpacing")
  val wordWrap get() = StringScope(properties, "wordWrap")
  val writingMode get() = StringScope(properties, "writingMode")
  val zIndex get() = IntScope(properties, "zIndex")

  // todo all svg props
  val fill get() = StringScope(properties, "fill")
  val stroke get() = StringScope(properties, "stroke")
  val strokeWidth get() = StringScope(properties, "strokeWidth")

  // pseudo selectors
  fun active(block: RuleSet) = "&:active"(block)
  fun checked(block: RuleSet) = "&:checked"(block)
  fun default(block: RuleSet) = "&:default"(block)
  fun disabled(block: RuleSet) = "&:disabled"(block)
  fun empty(block: RuleSet) = "&:empty"(block)
  fun enabled(block: RuleSet) = "&:enabled"(block)
  fun firstChild(block: RuleSet) = "&:first-child"(block)
  fun firstOfType(block: RuleSet) = "&:first-of-type"(block)
  fun focus(block: RuleSet) = "&:focus"(block)
  fun hover(block: RuleSet) = "&:hover"(block)
  fun indeterminate(block: RuleSet) = "&:indeterminate"(block)
  fun inRange(block: RuleSet) = "&:in-range"(block)
  fun invalid(block: RuleSet) = "&:invalid"(block)
  fun lastChild(block: RuleSet) = "&:last-child"(block)
  fun lastOfType(block: RuleSet) = "&:last-of-type"(block)
  fun link(block: RuleSet) = "&:link"(block)
  fun not(selector: String, block: RuleSet) = "&:not($selector)"(block)
  fun not(name: ClassName, block: RuleSet) = "&:not(${name.selector})"(block)
  fun nthChild(selector: String, block: RuleSet) = "&:nth-child($selector)"(block)
  fun nthLastChild(selector: String, block: RuleSet) = "&:nth-last-child($selector)"(block)
  fun nthLastOfType(selector: String, block: RuleSet) = "&:nth-last-of-type($selector)"(block)
  fun nthOfType(selector: String, block: RuleSet) = "&:nth-of-type($selector)"(block)
  fun nthChild(name: ClassName, block: RuleSet) = "&:nth-child(${name.selector})"(block)
  fun nthLastChild(name: ClassName, block: RuleSet) = "&:nth-last-child(${name.selector})"(block)
  fun nthLastOfType(name: ClassName, block: RuleSet) = "&:nth-last-of-type(${name.selector})"(block)
  fun nthOfType(name: ClassName, block: RuleSet) = "&:nth-of-type(${name.selector})"(block)
  fun onlyChild(block: RuleSet) = "&:only-child"(block)
  fun onlyOfType(block: RuleSet) = "&:only-of-type"(block)
  fun optional(block: RuleSet) = "&:optional"(block)
  fun outOfRange(block: RuleSet) = "&:out-of-range"(block)
  fun readOnly(block: RuleSet) = "&:read-only"(block)
  fun readWrite(block: RuleSet) = "&:read-write"(block)
  fun required(block: RuleSet) = "&:required"(block)
  fun valid(block: RuleSet) = "&:valid"(block)
  fun visited(block: RuleSet) = "&:visited"(block)
  fun after(block: RuleSet) = "&::after"(block)
  fun before(block: RuleSet) = "&::before"(block)
  fun placeholder(block: RuleSet) = "&::placeholder"(block)

  operator fun Selector.invoke(block: RuleSet) = "& ${this.selector}"(block)

  operator fun String.invoke(block: RuleSet) {
    rules.add(Rule(this, block))
  }

  fun put(name: String, value: String) {
    properties[name] = value
  }
}
